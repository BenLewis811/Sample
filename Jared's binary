using System;
using System.Threading;
using System.Linq;
class stringReplace1 {
  public static void Main (string[] args) {
    string enginput = "";
    string jared = "";
  /*
   (num) number key 
   0 = 0 - invalid
   1 = 1 - invalid
   2 = 2
   3 = 3 etc.. goes up to 9
    
     alphabet number key (lower & upper case) 
    lower case = alph 
    upper case = calph
    0 = A
    1 = B
    2 = C
    3 = D
    4 = E
    5 = F
    6 = G
    7 = H
    8 = I
    9 = J
    10 = K
    11 = L
    12 = M
    13 = N
    14 = O
    15 = P
    16 = Q
    17 = R 
    18 = S
    19 = T
    20 = U
    21 = V
    22 = W
    23 = X
    24 = Y
    25 = Z
    */
    /* special (spec) character number key (order in from top left to right ignoring numbers and using shift key for special digits before moving to next key.)
   0 = `
   1 = ~
   2 = !
   3 = @
   4 = #
   5 = $
   6 = %
   7 = ^
   8 = &
   9 = *
   10 = (
   11 = )
   12 = -
   13 = _
   14 = =
   15 = +
   16 = [
   17 = {
   18 = ]
   19 = }
   20 = \ 
   21 = |
   22 = ;
   23 = :
   24 = '
   25 = " 
   26 = ,
   27 = <
   28 = .
   29 = >
   30 = /
   31 = ?
   32 =  (space)
   */ 
    //capital alphabet
    Console.WriteLine("Binary Translator");
    Thread.Sleep(500);
    while (jared != "jared") {
    string[] calph = new string[26];
    calph[0] = "01000001";
    calph[1] = "01000010";
    calph[2] = "01000011";
    calph[3] = "01000100";
    calph[4] = "01000101";
    calph[5] = "01000110";
    calph[6] = "01000111";
    calph[7] = "01001000";
    calph[8] = "01001001";
    calph[9] = "01001010";
    calph[10] = "01001011";
    calph[11] = "01001100";
    calph[12] = "01001101";
    calph[13] = "01001110";
    calph[14] = "01001111";
    calph[15] = "01010000";
    calph[16] = "01010001";
    calph[17] = "01010010";
    calph[18] = "01010011";
    calph[19] = "01010100";
    calph[20] = "01010101";
    calph[21] = "01010110";
    calph[22] = "01010111";
    calph[23] = "01011000";
    calph[24] = "01011001";
    calph[25] = "01011010";
    //lowercase alphabet
        string[] alph = new string[26];
    alph[0] = "01100001";
    alph[1] = "01100010";
    alph[2] = "01100011";
    alph[3] = "01100100";
    alph[4] = "01100101";
    alph[5] = "01100110";
    alph[6] = "01100111";
    alph[7] = "01101000";
    alph[8] = "01101001";
    alph[9] = "01101010";
    alph[10] = "01101011";
    alph[11] = "01101100";
    alph[12] = "01101101";
    alph[13] = "01101110";
    alph[14] = "01101111";
    alph[15] = "01110000";
    alph[16] = "01110001";
    alph[17] = "01110010";
    alph[18] = "01110011";
    alph[19] = "01110100";
    alph[20] = "01110101";
    alph[21] = "01110110";
    alph[22] = "01110111";
    alph[23] = "01111000";
    alph[24] = "01111001";
    alph[25] = "01111010";
    
    string[] spec = new string[33];
    spec[0] = "01100000";
    spec[1] = "01111110";
    spec[2] = "00100001";
    spec[3] = "01000000";
    spec[4] = "00100011";
    spec[5] = "00100100";
    spec[6] = "00100101";
    spec[7] = "01011110";
    spec[8] = "00100110";
    spec[9] = "00101010";
    spec[10] = "00101000";
    spec[11] = "00101001";
    spec[12] = "00101101";
    spec[13] = "01011111";
    spec[14] = "00111101";
    spec[15] = "00101011";
    spec[16] = "01011011";
    spec[17] = "01111011";
    spec[18] = "01011101";
    spec[19] = "01111101";
    spec[20] = "01011100";
    spec[21] = "01111100";
    spec[22] = "00111011";
    spec[23] = "00111010";
    spec[24] = "00100111";
    spec[25] = "00100010";
    spec[26] = "00101100";
    spec[27] = "00111100";
    spec[28] = "00101110";
    spec[29] = "00111110";
    spec[30] = "00101111";
    spec[31] = "00111111";
    spec[32] = "00100000";
    string[] num = new string[10];
    num[0] = "00110000";
    num[1] = "00110001";
    num[2] = "00110010";
    num[3] = "00110011";
    num[4] = "00110100";
    num[5] = "00110101";
    num[6] = "00110110";
    num[7] = "00110111";
    num[8] = "00111000";
    num[9] = "00111001";
    //English to Binary
    START:;
    Console.WriteLine("\nEnter something in English that you would like to translate to binary. This translator does not translate the following characters: 0 and 1");
    enginput = Console.ReadLine();
    if (enginput.Contains("1") || enginput.Contains("0")) {
      Console.WriteLine("You may not translate 0 or 1. Try again.");
      Thread.Sleep(750);
      goto START;
    }
    //capital alphabet replacer
   while (enginput.Contains("A")) {
     enginput = enginput.Replace("A", calph[0]);
   }
   while (enginput.Contains("B")) {
     enginput = enginput.Replace("B", calph[1]);
   }
   while (enginput.Contains("C")) {
     enginput = enginput.Replace("C", calph[2]);
   }
   while (enginput.Contains("D")) {
     enginput = enginput.Replace("D", calph[3]);
   }
   while (enginput.Contains("E")) {
     enginput = enginput.Replace("E", calph[4]);
   }
    while (enginput.Contains("F")) {
     enginput = enginput.Replace("F", calph[5]);
   }
    while (enginput.Contains("G")) {
     enginput = enginput.Replace("G", calph[6]);
   }
    while (enginput.Contains("H")) {
     enginput = enginput.Replace("H", calph[7]);
   }
    while (enginput.Contains("I")) {
     enginput = enginput.Replace("I", calph[8]);
   }
    while (enginput.Contains("J")) {
     enginput = enginput.Replace("J", calph[9]);
   }
    while (enginput.Contains("K")) {
     enginput = enginput.Replace("K", calph[10]);
   }
    while (enginput.Contains("L")) {
     enginput = enginput.Replace("L", calph[11]);
   }
    while (enginput.Contains("M")) {
     enginput = enginput.Replace("M", calph[12]);
   }
    while (enginput.Contains("N")) {
     enginput = enginput.Replace("N", calph[13]);
   }
    while (enginput.Contains("O")) {
     enginput = enginput.Replace("O", calph[14]);
   }
    while (enginput.Contains("P")) {
     enginput = enginput.Replace("P", calph[15]);
   }
    while (enginput.Contains("Q")) {
     enginput = enginput.Replace("Q", calph[16]);
   }
    while (enginput.Contains("R")) {
     enginput = enginput.Replace("R", calph[17]);
   }
    while (enginput.Contains("S")) {
     enginput = enginput.Replace("S", calph[18]);
   }
    while (enginput.Contains("T")) {
     enginput = enginput.Replace("T", calph[19]);
   }
    while (enginput.Contains("U")) {
     enginput = enginput.Replace("U", calph[20]);
   }
    while (enginput.Contains("V")) {
     enginput = enginput.Replace("V", calph[21]);
   }
    while (enginput.Contains("W")) {
     enginput = enginput.Replace("W", calph[22]);
   }
    while (enginput.Contains("X")) {
     enginput = enginput.Replace("X", calph[23]);
   }
    while (enginput.Contains("Y")) {
     enginput = enginput.Replace("Y", calph[24]);
   }
    while (enginput.Contains("Z")) {
     enginput = enginput.Replace("Z", calph[25]);
   } 
   // lowercase alphabet replacer
    while (enginput.Contains("a")) {
     enginput = enginput.Replace("a", alph[0]);
   }
    while (enginput.Contains("b")) {
     enginput = enginput.Replace("b", alph[1]);
   }
    while (enginput.Contains("c")) {
     enginput = enginput.Replace("c", alph[2]);
   }
    while (enginput.Contains("d")) {
     enginput = enginput.Replace("d", alph[3]);
   }
    while (enginput.Contains("e")) {
     enginput = enginput.Replace("e", alph[4]);
   }
    while (enginput.Contains("f")) {
     enginput = enginput.Replace("f", alph[5]);
   }
    while (enginput.Contains("g")) {
     enginput = enginput.Replace("g", alph[6]);
   }
    while (enginput.Contains("h")) {
     enginput = enginput.Replace("h", alph[7]);
   }
    while (enginput.Contains("i")) {
     enginput = enginput.Replace("i", alph[8]);
   }
    while (enginput.Contains("j")) {
     enginput = enginput.Replace("j", alph[9]);
   }
    while (enginput.Contains("k")) {
     enginput = enginput.Replace("k", alph[10]);
   }
    while (enginput.Contains("l")) {
     enginput = enginput.Replace("l", alph[11]);
   }
    while (enginput.Contains("m")) {
     enginput = enginput.Replace("m", alph[12]);
   }
    while (enginput.Contains("n")) {
     enginput = enginput.Replace("n", alph[13]);
   }
    while (enginput.Contains("o")) {
     enginput = enginput.Replace("o", alph[14]);
   }
    while (enginput.Contains("p")) {
     enginput = enginput.Replace("p", alph[15]);
   }
    while (enginput.Contains("q")) {
     enginput = enginput.Replace("q", alph[16]);
   }
    while (enginput.Contains("r")) {
     enginput = enginput.Replace("r", alph[17]);
   }
    while (enginput.Contains("s")) {
     enginput = enginput.Replace("s", alph[18]);
   }
    while (enginput.Contains("t")) {
     enginput = enginput.Replace("t", alph[19]);
   }
    while (enginput.Contains("u")) {
     enginput = enginput.Replace("u", alph[20]);
   }
    while (enginput.Contains("v")) {
     enginput = enginput.Replace("v", alph[21]);
   }
    while (enginput.Contains("w")) {
     enginput = enginput.Replace("w", alph[22]);
   }
    while (enginput.Contains("x")) {
     enginput = enginput.Replace("x", alph[23]);
   }
    while (enginput.Contains("y")) {
     enginput = enginput.Replace("y", alph[24]);
   }
    while (enginput.Contains("z")) {
     enginput = enginput.Replace("z", alph[25]);
   }
   // special character replacers
   while (enginput.Contains("`")) {
     enginput = enginput.Replace("`", spec[0]);
   }
   while (enginput.Contains("~")) {
     enginput = enginput.Replace("~", spec[1]);
   }
   while (enginput.Contains("!")) {
     enginput = enginput.Replace("!", spec[2]);
   }
   while (enginput.Contains("@")) {
     enginput = enginput.Replace("@", spec[3]);
   }
   while (enginput.Contains("#")) {
     enginput = enginput.Replace("#", spec[4]);
   }
   while (enginput.Contains("$")) {
     enginput = enginput.Replace("$", spec[5]);
   }
   while (enginput.Contains("%")) {
     enginput = enginput.Replace("%", spec[6]);
   }
   while (enginput.Contains("^")) {
     enginput = enginput.Replace("^", spec[7]);
   }
   while (enginput.Contains("&")) {
     enginput = enginput.Replace("&", spec[8]);
   }
   while (enginput.Contains("*")) {
     enginput = enginput.Replace("*", spec[9]);
   }
   while (enginput.Contains("(")) {
     enginput = enginput.Replace("(", spec[10]);
   }
   while (enginput.Contains(")")) {
     enginput = enginput.Replace(")", spec[11]);
   }
   while (enginput.Contains("-")) {
     enginput = enginput.Replace("-", spec[12]);
   }
   while (enginput.Contains("_")) {
     enginput = enginput.Replace("_", spec[13]);
   }
   while (enginput.Contains("=")) {
     enginput = enginput.Replace("=", spec[14]);
   }
   while (enginput.Contains("+")) {
     enginput = enginput.Replace("+", spec[15]);
   }
   while (enginput.Contains("[")) {
     enginput = enginput.Replace("[", spec[16]);
   }
   while (enginput.Contains("{")) {
     enginput = enginput.Replace("{", spec[17]);
   }
   while (enginput.Contains("]")) {
     enginput = enginput.Replace("]", spec[18]);
   }
   while (enginput.Contains("}")) {
     enginput = enginput.Replace("}", spec[19]);
   }
   while (enginput.Contains("\\")) {
     enginput = enginput.Replace("\\", spec[20]);
   }
   
   while (enginput.Contains("|")) {
     enginput = enginput.Replace("|", spec[21]);
   }
   while (enginput.Contains(";")) {
     enginput = enginput.Replace(";", spec[22]);
   }
   while (enginput.Contains(":")) {
     enginput = enginput.Replace(":", spec[23]);
   }
   while (enginput.Contains("'")) {
     enginput = enginput.Replace("'", spec[24]);
   }
   
   while (enginput.Contains("\"")) {
     enginput = enginput.Replace("\"", spec[25]);
   }
   
   while (enginput.Contains(",")) {
     enginput = enginput.Replace(",", spec[26]);
   }
   while (enginput.Contains("<")) {
     enginput = enginput.Replace("<", spec[27]);
   }
   while (enginput.Contains(".")) {
     enginput = enginput.Replace(".", spec[28]);
   }
   while (enginput.Contains(">")) {
     enginput = enginput.Replace(">", spec[29]);
   }
   while (enginput.Contains("/")) {
     enginput = enginput.Replace("/", spec[30]);
   }
   while (enginput.Contains("?")) {
     enginput = enginput.Replace("?", spec[31]);
   }
   while (enginput.Contains(" ")) {
     enginput = enginput.Replace(" ", spec[32]);
   }
   //number replacers
   /*while (enginput.Contains("0")) {
     enginput = enginput.Replace("0", num[0]);
   }
   while (enginput.Contains("1")) {
     enginput = enginput.Replace("1", num[1]);
   }
   */
   while (enginput.Contains("2")) {
     enginput = enginput.Replace("2", num[2]);
   }
   while (enginput.Contains("3")) {
     enginput = enginput.Replace("3", num[3]);
   }
   while (enginput.Contains("4")) {
     enginput = enginput.Replace("4", num[4]);
   }
   while (enginput.Contains("5")) {
     enginput = enginput.Replace("5", num[5]);
   }
   while (enginput.Contains("6")) {
     enginput = enginput.Replace("6", num[6]);
   }
   while (enginput.Contains("7")) {
     enginput = enginput.Replace("7", num[7]);
   }
   while (enginput.Contains("8")) {
     enginput = enginput.Replace("8", num[8]);
   }
   while (enginput.Contains("9")) {
     enginput = enginput.Replace("9", num[9]);
   }
   Console.WriteLine(enginput);
   Thread.Sleep(1000);
   Console.WriteLine("\nType 'jared' if you would like to quit. Otherwise, press enter to keep translating.");
    jared = Console.ReadLine();
    }

  }
}
    
  
